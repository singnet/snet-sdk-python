# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import training_pb2 as training__pb2


class ModelStub(object):
    """Methods that the service provider must implement
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_model = channel.unary_unary(
                '/training.Model/create_model',
                request_serializer=training__pb2.NewModel.SerializeToString,
                response_deserializer=training__pb2.ModelID.FromString,
                )
        self.validate_model_price = channel.unary_unary(
                '/training.Model/validate_model_price',
                request_serializer=training__pb2.ValidateRequest.SerializeToString,
                response_deserializer=training__pb2.PriceInBaseUnit.FromString,
                )
        self.upload_and_validate = channel.stream_unary(
                '/training.Model/upload_and_validate',
                request_serializer=training__pb2.UploadInput.SerializeToString,
                response_deserializer=training__pb2.StatusResponse.FromString,
                )
        self.validate_model = channel.unary_unary(
                '/training.Model/validate_model',
                request_serializer=training__pb2.ValidateRequest.SerializeToString,
                response_deserializer=training__pb2.StatusResponse.FromString,
                )
        self.train_model_price = channel.unary_unary(
                '/training.Model/train_model_price',
                request_serializer=training__pb2.ModelID.SerializeToString,
                response_deserializer=training__pb2.PriceInBaseUnit.FromString,
                )
        self.train_model = channel.unary_unary(
                '/training.Model/train_model',
                request_serializer=training__pb2.ModelID.SerializeToString,
                response_deserializer=training__pb2.StatusResponse.FromString,
                )
        self.delete_model = channel.unary_unary(
                '/training.Model/delete_model',
                request_serializer=training__pb2.ModelID.SerializeToString,
                response_deserializer=training__pb2.StatusResponse.FromString,
                )
        self.get_model_status = channel.unary_unary(
                '/training.Model/get_model_status',
                request_serializer=training__pb2.ModelID.SerializeToString,
                response_deserializer=training__pb2.StatusResponse.FromString,
                )


class ModelServicer(object):
    """Methods that the service provider must implement
    """

    def create_model(self, request, context):
        """Free
        Can pass the address of the model creator
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validate_model_price(self, request, context):
        """Free
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def upload_and_validate(self, request_iterator, context):
        """Paid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def validate_model(self, request, context):
        """Paid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def train_model_price(self, request, context):
        """Free, one signature for both train_model_price & train_model methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def train_model(self, request, context):
        """Paid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_model(self, request, context):
        """Free
        After model deletion, the status becomes DELETED in etcd
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_model_status(self, request, context):
        """Free
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_model': grpc.unary_unary_rpc_method_handler(
                    servicer.create_model,
                    request_deserializer=training__pb2.NewModel.FromString,
                    response_serializer=training__pb2.ModelID.SerializeToString,
            ),
            'validate_model_price': grpc.unary_unary_rpc_method_handler(
                    servicer.validate_model_price,
                    request_deserializer=training__pb2.ValidateRequest.FromString,
                    response_serializer=training__pb2.PriceInBaseUnit.SerializeToString,
            ),
            'upload_and_validate': grpc.stream_unary_rpc_method_handler(
                    servicer.upload_and_validate,
                    request_deserializer=training__pb2.UploadInput.FromString,
                    response_serializer=training__pb2.StatusResponse.SerializeToString,
            ),
            'validate_model': grpc.unary_unary_rpc_method_handler(
                    servicer.validate_model,
                    request_deserializer=training__pb2.ValidateRequest.FromString,
                    response_serializer=training__pb2.StatusResponse.SerializeToString,
            ),
            'train_model_price': grpc.unary_unary_rpc_method_handler(
                    servicer.train_model_price,
                    request_deserializer=training__pb2.ModelID.FromString,
                    response_serializer=training__pb2.PriceInBaseUnit.SerializeToString,
            ),
            'train_model': grpc.unary_unary_rpc_method_handler(
                    servicer.train_model,
                    request_deserializer=training__pb2.ModelID.FromString,
                    response_serializer=training__pb2.StatusResponse.SerializeToString,
            ),
            'delete_model': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_model,
                    request_deserializer=training__pb2.ModelID.FromString,
                    response_serializer=training__pb2.StatusResponse.SerializeToString,
            ),
            'get_model_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_model_status,
                    request_deserializer=training__pb2.ModelID.FromString,
                    response_serializer=training__pb2.StatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'training.Model', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Model(object):
    """Methods that the service provider must implement
    """

    @staticmethod
    def create_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/create_model',
            training__pb2.NewModel.SerializeToString,
            training__pb2.ModelID.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def validate_model_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/validate_model_price',
            training__pb2.ValidateRequest.SerializeToString,
            training__pb2.PriceInBaseUnit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def upload_and_validate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/training.Model/upload_and_validate',
            training__pb2.UploadInput.SerializeToString,
            training__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def validate_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/validate_model',
            training__pb2.ValidateRequest.SerializeToString,
            training__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def train_model_price(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/train_model_price',
            training__pb2.ModelID.SerializeToString,
            training__pb2.PriceInBaseUnit.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def train_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/train_model',
            training__pb2.ModelID.SerializeToString,
            training__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/delete_model',
            training__pb2.ModelID.SerializeToString,
            training__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_model_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/get_model_status',
            training__pb2.ModelID.SerializeToString,
            training__pb2.StatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
