# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import training_pb2 as training__pb2


class ModelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_model = channel.unary_unary(
                '/training.Model/create_model',
                request_serializer=training__pb2.CreateModelRequest.SerializeToString,
                response_deserializer=training__pb2.ModelDetailsResponse.FromString,
                )
        self.delete_model = channel.unary_unary(
                '/training.Model/delete_model',
                request_serializer=training__pb2.UpdateModelRequest.SerializeToString,
                response_deserializer=training__pb2.ModelDetailsResponse.FromString,
                )
        self.get_model_status = channel.unary_unary(
                '/training.Model/get_model_status',
                request_serializer=training__pb2.ModelDetailsRequest.SerializeToString,
                response_deserializer=training__pb2.ModelDetailsResponse.FromString,
                )
        self.update_model_access = channel.unary_unary(
                '/training.Model/update_model_access',
                request_serializer=training__pb2.UpdateModelRequest.SerializeToString,
                response_deserializer=training__pb2.ModelDetailsResponse.FromString,
                )
        self.get_all_models = channel.unary_unary(
                '/training.Model/get_all_models',
                request_serializer=training__pb2.AccessibleModelsRequest.SerializeToString,
                response_deserializer=training__pb2.AccessibleModelsResponse.FromString,
                )


class ModelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_model(self, request, context):
        """The AI developer needs to Implement this service and Daemon will call these
        There will be no cost borne by the consumer in calling these methods,
        Pricing will apply when you actually call the training methods defined.
        AI consumer will call all these methods
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_model(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_model_status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_model_access(self, request, context):
        """Daemon will implement , however the AI developer should skip implementing these and just provide dummy code.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_all_models(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ModelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_model': grpc.unary_unary_rpc_method_handler(
                    servicer.create_model,
                    request_deserializer=training__pb2.CreateModelRequest.FromString,
                    response_serializer=training__pb2.ModelDetailsResponse.SerializeToString,
            ),
            'delete_model': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_model,
                    request_deserializer=training__pb2.UpdateModelRequest.FromString,
                    response_serializer=training__pb2.ModelDetailsResponse.SerializeToString,
            ),
            'get_model_status': grpc.unary_unary_rpc_method_handler(
                    servicer.get_model_status,
                    request_deserializer=training__pb2.ModelDetailsRequest.FromString,
                    response_serializer=training__pb2.ModelDetailsResponse.SerializeToString,
            ),
            'update_model_access': grpc.unary_unary_rpc_method_handler(
                    servicer.update_model_access,
                    request_deserializer=training__pb2.UpdateModelRequest.FromString,
                    response_serializer=training__pb2.ModelDetailsResponse.SerializeToString,
            ),
            'get_all_models': grpc.unary_unary_rpc_method_handler(
                    servicer.get_all_models,
                    request_deserializer=training__pb2.AccessibleModelsRequest.FromString,
                    response_serializer=training__pb2.AccessibleModelsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'training.Model', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Model(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/create_model',
            training__pb2.CreateModelRequest.SerializeToString,
            training__pb2.ModelDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_model(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/delete_model',
            training__pb2.UpdateModelRequest.SerializeToString,
            training__pb2.ModelDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_model_status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/get_model_status',
            training__pb2.ModelDetailsRequest.SerializeToString,
            training__pb2.ModelDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_model_access(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/update_model_access',
            training__pb2.UpdateModelRequest.SerializeToString,
            training__pb2.ModelDetailsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_all_models(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/training.Model/get_all_models',
            training__pb2.AccessibleModelsRequest.SerializeToString,
            training__pb2.AccessibleModelsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
