syntax = "proto3";
import "google/protobuf/descriptor.proto";  // need for indicators
package trainingV2;
option go_package = "../training";

// The methods below are implemented by service provider
service Model {

  // free
  // You can forward the address of the model creator.
  rpc create_model(NewModel) returns (ModelID) {}

  // free
  rpc validate_model_price(ValidateRequest) returns (PriceInBaseUnit) {}

  // paid
  rpc upload_and_validate(stream DataToUpload) returns (StatusResponse) {}

  // paid
  rpc validate_model(ValidateRequest) returns (StatusResponse) {}

  // free, one signature for train_model_price & train_model methods
  rpc train_model_price(ModelID) returns (PriceInBaseUnit) {}

  // paid
  rpc train_model(ModelID) returns (StatusResponse) {}

  // free
  rpc delete_model(ModelID) returns (StatusResponse) {
    // После удаления модели status становится DELETED в etcd
  }

  // free
  rpc get_model_status(ModelID) returns (StatusResponse) {}
}

message ModelResponse {
  string model_id = 1;
  Status status = 2;
  string updated_date = 3;
  string name = 4;
  string description = 5;
  string grpc_method_name = 6;
  string grpc_service_name = 7;

  // List of all the addresses that will have access to this model
  repeated string address_list = 8;

  // We provide access to the model only for use and viewing
  bool is_public = 9;

  string training_data_link = 10;
}

// Used as input for requests: new_model
// Whether to use these fields is up to the service provider, the main thing is to return the model_id
message NewModel {
  string name = 1;
  string description = 2;
  string grpc_method_name = 3;
  string grpc_service_name = 4;

  // List of all the addresses that will have access to this model
  repeated string address_list = 5;

  // set this to true if you want your model to be used by other AI consumers
  bool is_public = 6;

  // These parameters will be passed by the daemon
  string organization_id = 7;
  string service_id = 8;
  string group_id = 9;
}

// This structure needs to be used by the service provider.
message ModelID {
  string model_id = 1;
}

// This structure needs to be used by the service provider.
// Used in the train_model_price method to get the training/validation price
message PriceInBaseUnit {
  uint64 price = 1; // cogs, weis, afet, aasi etc
}

enum Status {
  CREATED = 0;
  VALIDATING = 1;
  VALIDATED = 2;
  TRAINING = 3;
  READY_TO_USE = 4; // after training completed
  ERRORED = 5;
  DELETED = 6;
}

message StatusResponse {
  Status status = 1;
}

message DataToUpload {
  string model_id = 2;
  bytes data = 3;
}

message ValidateRequest {
  string model_id = 2;
  string training_data_link = 3;
}

extend google.protobuf.MethodOptions {
  string defaultModelID = 50001;
  uint64 datasetMaxSizeMB = 50002;
  repeated string filesTypes = 50003; // [png, jpg, mp4]
  string datasetDescription = 50004; // свободное описание доп требований
  uint64 maxModelsPerUser = 50006;
}
