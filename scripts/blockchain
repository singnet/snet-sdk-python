#!/usr/bin/env python3

import os
import pathlib
import shutil
import subprocess
import sys


def main():
    assert len(sys.argv) > 1, "please select a target from 'install', 'uninstall'"
    target = sys.argv[1]
    blockchain_dir = pathlib.Path(__file__).absolute().parent.parent.joinpath("blockchain")
    node_modules_dir = blockchain_dir.joinpath("node_modules")
    platform_json_src_dir = node_modules_dir.joinpath("singularitynet-platform-contracts")
    token_json_src_dir = node_modules_dir.joinpath("singularitynet-token-contracts")
    token_contract_name = "SingularityNetToken"
    contract_json_dest_dir = pathlib.Path(__file__).absolute().parent.parent.joinpath("snet_sdk", "resources", "contracts")
    abi_contract_names = ["Registry", "MultiPartyEscrow"]
    networks_contract_names = ["Registry", "MultiPartyEscrow"]

    npm_location = shutil.which('npm')
    if not npm_location:
        raise Exception("This script requires 'npm' to be installed and in your PATH")

    if not os.path.isdir(contract_json_dest_dir):
        os.mkdir(contract_json_dest_dir)

    if target == "install":
        shutil.rmtree(contract_json_dest_dir)

        subprocess.call([npm_location, "install"], cwd=blockchain_dir)

        os.makedirs(contract_json_dest_dir.joinpath("abi"), exist_ok=True)
        os.makedirs(contract_json_dest_dir.joinpath("networks"), exist_ok=True)

        for contract_name in abi_contract_names:
            shutil.copy(platform_json_src_dir.joinpath("abi", "{}.json".format(contract_name)),
                        contract_json_dest_dir.joinpath("abi", "{}.json".format(contract_name)))
        for contract_name in networks_contract_names:
            shutil.copy(platform_json_src_dir.joinpath("networks", "{}.json".format(contract_name)),
                        contract_json_dest_dir.joinpath("networks", "{}.json".format(contract_name)))

        shutil.copy(token_json_src_dir.joinpath("abi", "{}.json".format(token_contract_name)),
                    contract_json_dest_dir.joinpath("abi", "{}.json".format(token_contract_name)))
        shutil.copy(token_json_src_dir.joinpath("networks", "{}.json".format(token_contract_name)),
                    contract_json_dest_dir.joinpath("networks", "{}.json".format(token_contract_name)))
    elif target == "uninstall":
        try:
            shutil.rmtree(node_modules_dir)
            shutil.rmtree(contract_json_dest_dir.joinpath("abi"))
            shutil.rmtree(contract_json_dest_dir.joinpath("networks"))
        except FileNotFoundError:
            pass
    else:
        print("Target not supported.")


if __name__ == "__main__":
    main()
